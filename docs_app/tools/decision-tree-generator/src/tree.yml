- label: '有一个可观察对象'
  children:
    - label: 想更改每个发出的值
      children:
        - label: 更改为常量
          children:
            - label: mapTo
        - label: 通过公式计算得出值
          children:
            - label: map
    - label: 我想从每个发射值中选择一个属性
      children:
        - label: pluck
    - label: 我想监视发射的值而不影响它们
      children:
        - label: tap
    - label: 我想只允许传递某些值
      children:
        - label: 基于自定义逻辑
          children:
            - label: filter
        - label: 如果它们在可观察对象的开始
          children:
            - label: 只有第一个值
              children:
                - label: first
            - label: 基于指定的数量
              children:
                - label: take
            - label: 基于自定义逻辑
              children:
                - label: takeWhile
        - label: 如果它们恰好是第n个发射
          children:
            - label: elementAt
        - label: 如果它们在可观察对象的末尾
          children:
            - label: 只有最后一个值
              children:
                - label: last
            - label: 基于指定的数量
              children:
                - label: takeLast
        - label: 直到另一个可观察对象发出一个值
          children:
            - label: takeUntil
    - label: 我想忽略某些值
      children:
        - label: 全部值
          children:
            - label: ignoreElements
        - label: 从可观察对象的开始
          children:
            - label: 基于指定的数量
              children:
                - label: skip
            - label: 基于自定义逻辑
              children:
                - label: skipWhile
        - label: 从可观察对象的结尾
          children:
            - label: skipLast
        - label: 直到另一个可观察对象发出一个值
          children:
            - label: skipUntil
        - label: 与以前的值匹配
          children:
            - label: 基于值相等
              children:
                - label: 在当前值发出之前
                  children:
                    - label: distinctUntilChanged
                - label: 在过去的一段时间里
                  children:
                    - label: distinct
            - label: 根据key或对象属性
              children:
                - label: 在当前值发出之前
                  children:
                    - label: distinctUntilKeyChanged
        - label: 发生得太频繁
          children:
            - label: 通过在每个时间窗口中发出第一个值
              children:
                - label: 时间窗口由另一个可观察对象的发射确定
                  children:
                    - label: throttle
                - label: 时间窗口由持续时间确定
                  children:
                    - label: throttleTime
            - label: 通过在每个时间窗口中发出最后一个值
              children:
                - label: 时间窗口由另一个可观察对象的发射确定
                  children:
                    - label: audit
                - label: 时间窗口由持续时间确定
                  children:
                    - label: auditTime
            - label: 在一段静默时间后立即发出最后一个值
              children:
                - label: 静默持续时间阈值由另一个可观察对象确定
                  children:
                    - label: debounce
                - label: 静默持续时间阈值由持续时间确定
                  children:
                    - label: debounceTime
    - label: 我想使用发出的所有值来计算公式
      children:
        - label: 只输出最终的计算值
          children:
            - label: reduce
        - label: 并在源发出值时输出计算值
          children:
            - label: scan
        - label: 并在源发出值时将计算的值输出为嵌套的可观察对象
          children:
            - label: mergeScan
    - label: 我想用元数据包装它的消息
      children:
        - label: 描述每个通知（next，error或complete）
          children:
            - label: materialize
        - label: 包含自上次发出值以来的时间
          children:
            - label: timeInterval
    - label: 一段时间不活动后
      children:
        - label: 我想抛出一个错误
          children:
            - label: timeout
        - label: 我想切换到另一个可观察对象
          children:
            - label: timeoutWith
    - label: 我想确保只有一个值
      children:
        - label: single
    - label: 我想知道它发出了多少个值
      children:
        - label: count
    - label: 我想添加一个值
      children:
        - label: startWith
    - label: 我想延迟发射
      children:
        - label: 基于指定的时间
          children:
            - label: delay
        - label: 根据另一个可观察对象的发射
          children:
            - label: delayWhen
    - label: 我想将值分组
      children:
        - label: 直到可观察对象完成
          children:
            - label: 并转换为数组
              children:
                - label: toArray
            - label: 并转换成一个Promise
              children:
                - label: Observable
                  method: toPromise
        - label: 将当前值和前一个值作为数组放在一起
          children:
            - label: pairwise
        - label: '基于一个标准，并输出两个可观察对象：符合标准的和不符合标准的'
          children:
            - label: partition
        - label: 按指定大小分组
          children:
            - label: 并将分组作为数组发出
              children:
                - label: bufferCount
            - label: 并将分组作为嵌套的可观察对象发出
              children:
                - label: windowCount
        - label: 基于时间
          children:
            - label: 并将分组作为数组发出
              children:
                - label: bufferTime
            - label: 并将分组作为嵌套的可观察对象发出
              children:
                - label: windowTime
        - label: 直到另一个可观察对象发出
          children:
            - label: 并将分组作为数组发出
              children:
                - label: buffer
            - label: 并将分组作为嵌套的可观察对象发出
              children:
                - label: window
        - label: 基于按需创建的可观察对象发出
          children:
            - label: 并将分组作为数组发出
              children:
                - label: bufferWhen
            - label: 并将分组作为嵌套的可观察对象发出
              children:
                - label: windowWhen
        - label: 基于另一个用于打开分组的可观察对象，以及用于关闭分组的可观察对象
          children:
            - label: 并将分组作为数组发出
              children:
                - label: bufferToggle
            - label: 并将分组作为嵌套的可观察对象发出
              children:
                - label: windowToggle
        - label: 基于根据发射值计算出的key
          children:
            - label: groupBy
    - label: 我想为每个值启动一个新的可观察对象
      children:
        - label: 并从所有嵌套的可观察对象并行发出值
          children:
            - label: 其中嵌套的可观测对象对于每个值都是相同的
              children:
                - label: mergeMapTo
            - label: 为每个值计算嵌套的可观察对象
              children:
                - label: mergeMap
        - label: 并按顺序从每个嵌套的可观察对象发出值
          children:
            - label: 其中嵌套的可观察对象对于每个值都是相同的
              children:
                - label: concatMapTo
            - label: where the nested Observable is calculated for each value
              children:
                - label: concatMap
        - label: and cancel the previous nested Observable when a new value arrives
          children:
            - label: where the nested Observable is the same for every value
              children:
                - label: switchMapTo
            - label: where the nested Observable is calculated for each value
              children:
                - label: switchMap
        - label: and ignore incoming values while the current nested Observable has not yet completed
          children:
            - label: exhaustMap
        - label: and recursively start a new Observable for each new value
          children:
            - label: expand
    - label: I want to perform custom operations
      children:
        - label: pipe
    - label: I want to share a subscription between multiple subscribers
      children:
        - label: using a conventional Subject
          children:
            - label: and start it as soon as the first subscriber arrives
              children:
                - label: share
            - label: and start it manually or imperatively
              children:
                - label: publish
        - label: using a BehaviorSubject
          children:
            - label: publishBehavior
        - label: using a ReplaySubject
          children:
            - label: publishReplay
        - label: using an AsyncSubject
          children:
            - label: publishLast
        - label: using a specific subject implementation
          children:
            - label: multicast
    - label: when an error occurs
      children:
        - label: I want to start a new Observable
          children:
            - label: catchError
        - label: I want to re-subscribe
          children:
            - label: immediately
              children:
                - label: retry
            - label: when another Observable emits
              children:
                - label: retryWhen
    - label: when it completes
      children:
        - label: I want to re-subscribe
          children:
            - label: immediately
              children:
                - label: repeat
            - label: when another Observable emits
              children:
                - label: repeatWhen
        - label: I want to start a new Observable
          children:
            - label: concat
    - label: when it completes, errors or unsubscribes, I want to execute a function
      children:
        - label: finalize
    - label: I want to change the scheduler
      children:
        - label: that routes calls to subscribe
          children:
            - label: subscribeOn
        - label: that routes values to observers
          children:
            - label: observeOn
    - label: I want to combine this Observable with others, and
      children:
        - label: I want to receive values only from the Observable that emits a value first
          children:
            - label: race
        - label: I want to output the values from either of them
          children:
            - label: merge
        - label: I want to output a value computed from values of the source Observables
          children:
            - label: using the latest value of each source whenever any source emits
              children:
                - label: combineLatest
            - label: using the latest value of each source only when the primary Observable emits
              children:
                - label: withLatestFrom
            - label: using each source value only once
              children:
                - label: zip
- label: 'I have some Observables to combine together as one Observable, and'
  children:
    - label: I want to receive values only from the Observable that emits a value first
      children:
        - label: race
    - label: I want to be notified when all of them have completed
      children:
        - label: forkJoin
    - label: I want to output the values from either of them
      children:
        - label: merge
    - label: I want to output a value computed from values of the source Observables
      children:
        - label: using the latest value of each source whenever any source emits
          children:
            - label: combineLatest
        - label: using each source value only once
          children:
            - label: zip
    - label: I want to subscribe to each in order
      children:
        - label: concat
- label: 'I have no Observables yet, and'
  children:
    - label: I want to create a new Observable
      children:
        - label: using custom logic
          children:
            - label: Observable
              method: create
        - label: using a state machine similar to a for loop
          children:
            - label: generate
        - label: that throws an error
          children:
            - label: throwError
        - label: that just completes, without emitting values
          children:
            - label: EMPTY
        - label: that never emits anything
          children:
            - label: NEVER
        - label: from an existing source of events
          children:
            - label: coming from the DOM or Node.js or similar
              children:
                - label: fromEvent
            - label: that uses an API to add and remove event handlers
              children:
                - label: fromEventPattern
        - label: from a Promise or an event source
          children:
            - label: from
        - label: that iterates
          children:
            - label: over the values in an array
              children:
                - label: from
            - label: over values in a numeric range
              children:
                - label: range
            - label: over prefined values given as arguments
              children:
                - label: of
        - label: that emits values on a timer
          children:
            - label: regularly
              children:
                - label: interval
            - label: with an optional initial delay
              children:
                - label: timer
        - label: which is built on demand when subscribed
          children:
            - label: defer
    - label: I want to convert a callback to an Observable
      children:
        - label: supporting a conventional callback API
          children:
            - label: bindCallback
        - label: supporting Node.js callback style API
          children:
            - label: bindNodeCallback
